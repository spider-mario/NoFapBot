#!/usr/bin/env groovy

/*
	NoFap Bot

	Copyright 2015 spider-mario <spidermario@free.fr>

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU Affero General Public License as
	published by the Free Software Foundation, either version 3 of the
	License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU Affero General Public License for more details.

	You should have received a copy of the GNU Affero General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

@Grab('org.pircbotx:pircbotx:2.1')
@Grab('org.slf4j:slf4j-simple:1.7.25')
import org.pircbotx.MultiBotManager
import org.pircbotx.hooks.events.*

@Grab('org.mapdb:mapdb:3.0.3')
import org.mapdb.DBMaker

@Grab('org.ocpsoft.prettytime:prettytime:4.0.1.Final')
@Grab('org.ocpsoft.prettytime:prettytime-nlp:4.0.1.Final')
import org.ocpsoft.prettytime.PrettyTime
import org.ocpsoft.prettytime.nlp.PrettyTimeParser

@Grab('org.yaml:snakeyaml:1.18')
import org.yaml.snakeyaml.Yaml

class IrcBot extends org.pircbotx.hooks.ListenerAdapter {
	final def database
	final def startDates

	IrcBot(File dbFile) {
		database = DBMaker.fileDB(dbFile).closeOnJvmShutdown().make()
		startDates = database.treeMap("NoFap").createOrOpen()
	}

	def prettyTime() {
		return new PrettyTime(Locale.ENGLISH);
	}
	final def timeParser = new PrettyTimeParser()

	final def commands = [
		help: [
			usage: ["help: show all available commands", "help COMMAND: show how to use a particular command"],
			run: {e, args ->
				if (args.empty) {
					e.respond(
						"Available commands: ${commands.keySet().join(', ')}. " +
						"Use `help COMMAND` to see how to use one in particular."
					)
				}
				else {
					if (commands.containsKey(args)) {
						commands[args].usage.each {e.respond(it)}
					}
					else {
						e.respond("Unknown command `$args`. Available commands are ${commands.keySet().join(', ')}.")
					}
				}
			}
		],

		about: [
			usage: ["about: show information about NoFapBot itself"],
			run: {e, args ->
				e.respond(
					"NoFapBot is an IRC bot to help you measure your NoFap streaks. " +
					"It is free and open source: https://github.com/spider-mario/NoFapBot"
				)
			}
		],

		set: [
			usage: ["set DATE: indicate when the streak started"],
			run: {e, args ->
				if (args.empty) {
					e.respond("You did not indicate a date. If you wish to use the current date, use `reset`.")
					return
				}

				def dates = timeParser.parse(args)
				if (!dates) {
					e.respond("Sorry, I did not understand your start date.")
					return
				}

				startDates.put(e.user.nick, dates[0])
				database.commit()

				e.respond("Recorded ${dates[0]}.")
			}
		],

		reset: [
			usage: ["reset: indicate that the streak has just started"],
			run: {e, args ->
				if (args) {
					e.respond("This command does not take any argument.")
					return
				}

				commands.set.run(e, "now")
			}
		],

		get: [
			usage: ["get: see your streak"],
			run: {e, args ->
				if (args) {
					e.respond("This command does not take any argument.")
					return
				}

				def startDate = startDates.get(e.user.nick)

				if (startDate) {
					def prettyTime = prettyTime()
					def durations = prettyTime.calculatePreciseDuration(startDate)
					e.respond("Your streak started ${prettyTime.format(durations.take(2))} ($startDate).")
				}
				else {
					e.respond("I do not know you. Sorry.")
				}
			}
		],

		forget: [
			usage: ["forget: remove your data from the database"],
			run: {e, args ->
				if (args) {
					e.respond("This command does not take any argument.")
					return
				}

				def nick = e.user.nick

				startDates.remove(nick)
				database.commit()

				e.respond("$nick? $nick who?")
			}
		],

		emergency: [
			usage: ["emergency: in case of a NoFap emergency"],
			run: {e, args ->
				if (args) {
					e.respond("This command does not take any argument.")
					return
				}

				e.respond("https://emergency.nofap.com/")
			}
		],

		'911': [
			usage: ["911: in case of a NoFap emergency"],
			run: {e, args ->
				commands.emergency.run(e, args)
			}
		]
	]

	def handleMessageEvent(event, body) {
		def command = body
		def args = ''

		def matcher = (body =~ /(?<command>[^\s]+)(?:\s+(?<args>.*))?/)
		if (matcher.matches()) {
			command = matcher.group('command')
			args    = matcher.group('args') ?: ''
		}

		if (!commands.containsKey(command)) {
			event.respond("Unknown command `$command`. Use `help` to see all available commands.")
			return
		}

		commands[command].run(event, args)
	}

	@Override
	void onGenericMessage(org.pircbotx.hooks.types.GenericMessageEvent event) {
		switch (event) {
			case PrivateMessageEvent:
				handleMessageEvent(event, event.message.trim())
				break

			case MessageEvent:
				def matcher = (event.message =~ /\Q${event.bot.nick}\E\s*[:,]?\s*(?<body>.*?)\s*$/)
				if (matcher.matches()) {
					handleMessageEvent(event, matcher.group('body'))
				}
				break
		}
	}
}

@groovy.transform.CompileStatic
class Configuration {
	static class Server {
		String hostname
		int port
		boolean secure
		String password = ''

		String encoding = 'UTF-8'
	}

	Server server

	String nick
	String password = ''

	List<String> channels = []

	File databaseFile

	def getIrcConfiguration() {
		def builder = new org.pircbotx.Configuration.Builder()

		builder.addServer(server.hostname, server.port)
		builder.serverPassword = server.password
		if (server.secure) {
			builder.socketFactory = javax.net.ssl.SSLSocketFactory.default
		}

		builder.encoding = java.nio.charset.Charset.forName(server.encoding)

		builder.name = nick
		if (password) {
			builder.nickservPassword = password
		}

		channels.each {builder.addAutoJoinChannel(it)}

		builder.autoNickChange = true
		builder.autoReconnect  = true

		builder.login = "NoFapBot"
		builder.version = "NoFapBot v0.1"

		builder.addListener(new IrcBot(databaseFile))

		return builder.buildConfiguration()
	}

	static def getYamlConstructor() {
		def constructor = new org.yaml.snakeyaml.constructor.Constructor(Configuration)

		def typeDescription = new org.yaml.snakeyaml.TypeDescription(Configuration)
		typeDescription.putListPropertyType('chans', String)

		constructor.addTypeDescription(typeDescription)

		return constructor
	}
}

def cli = new CliBuilder(usage: "NoFapBot [options] <configuration file> [configuration files...]",
                         header: "Options:")
cli.h(longOpt: 'help', "print this message")
def options = cli.parse(args)

if (options.h || options.arguments().size() == 0) {
	cli.usage()
	return
}

def yaml = new Yaml(Configuration.yamlConstructor)

def bots = new MultiBotManager()

options.arguments().each {configurationFile ->
	def configuration = new File(configurationFile).withInputStream {yaml.load(it)}
	bots.addBot(configuration.ircConfiguration)
}

bots.start()
